#!/usr/bin/env python3

import pandas as pd
import numpy as np
import argparse
from pathlib import Path
from os import path

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("readcounts", 
                        help="A tsv file with readcounts, such as that generated by featureCounts")
    parser.add_argument("--output", 
                        help="Where should the output be stored?")
    return parser.parse_args()


def filter_readcounts_df(df, sample_name=None):
    """
    filter the dataframe to just samples
    :param df: a dataFrame contains the result coming from featureCounts
    :param sample_name: a list, all sample names, same as the result of featureCounts
    """
    result = df
    if sample_name is not None:
        return result.loc[:, sample_name].copy()

    colnames = result.columns
    dont_include = {"Geneid", "Chr", "Start", "End", "Strand", "Length"}
    sample_names = [name not in dont_include for name in colnames]
    sample_reads = result.loc[:, sample_names].copy()

    return sample_reads


def get_gene_lengths(df, colname="Length"):
    """
    gets gene lengths from a featureCounts-like dataframe
    :param df: a dataFrame contains the result coming from featureCounts
    :param colname: name of the column with gene lengths
    """
    return df[colname]


def get_gene_names(df, colname="Geneid"):
    """
    gets gene lengths from a featureCounts-like dataframe
    :param df: a dataFrame contains the result coming from featureCounts
    :param colname: name of the column with gene names
    """
    return df[colname]


def read_counts2tpm(read_counts, gene_lengths):
    """
    convert read counts to TPM (transcripts per million)
    :param read_counts: a dataFrame contains the result coming from featureCounts
    :param gene_lengths: a list containing gene lengths (in the same order as read_counts)
    :return: TPM
    """

    rate = read_counts.div(gene_lengths, axis=0)
    tpm = rate / np.sum(rate, axis=0) * 1e6
    return pd.DataFrame(data=tpm, columns=read_counts.columns)


def convert_dataframe(raw_data):
    """
    Does all of the conversion, from raw data to tpm table with gene names
    """
    read_counts = filter_readcounts_df(raw_data)
    gene_lengths = get_gene_lengths(raw_data)

    tpm = read_counts2tpm(read_counts, gene_lengths)
    tpm.index = get_gene_names(raw_data)
    return tpm


def main():
    args = get_args()
    
    # If it is an empty file, just touch the output 
    if (path.isfile(args.readcounts) and path.getsize(args.readcounts) == 0):
        print(f"{args.readcounts} is an EMPTY file. Creating EMPTY output at {args.output}")
        Path(args.output).touch()  
        return

    raw_data = pd.read_csv(args.readcounts, sep="\t", comment="#")
    tpm = convert_dataframe(raw_data)
    tpm.to_csv(args.output, sep="\t")


if __name__=="__main__":
    main()
